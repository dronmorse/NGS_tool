@app.route("/FASTAOverview", methods=["GET", "POST"])
@login_required
def inputOverview():

    if request.method == "POST":

        # if fastq - perform QC
        if request.form.get("pageChoice") == "fastq":
            
            # clear the temp directory
            delete_files_in_directory(r"temp")

            buildInputFile(r"temp", prefix=request.form.get("header"), data=request.form.get("content"), filetype=request.form.get("pageChoice"),  name="inputFile")

            # run fastqp for QC analysis
            filePath = rf"temp/inputFile.{request.form.get("pageChoice")}"
            command = f"fastqc {filePath}"

            os.system(command)

            return sorry("Push your file to ORF: {} {}".format(request.form.get("header"), request.form.get("content")))

        # if fasta - push it to ORF
        else:

            return sorry(request.form.get("pageChoice") + request.form.get("header") + request.form.get("content"))
    
    else:
        
        # prepare necessary variables
        workFile = r"{}/temp/{}".format(os.getcwd(), os.listdir(r"temp/")[0])
        pageChoice = 'fastq' if os.listdir(r"temp/")[0][-5:] == "fastq" else "fasta"
        firstChar = "@" if os.listdir(r"temp/")[0][-5:] == "fastq" else ">"

        fastxReadList = []
        header = ''
                        
        # read each fasta read into memory
        with open(workFile, 'r') as f:

            for line in f.readlines():

                if line.startswith(firstChar):

                    # dump the read into a dict if the header exists
                    if header != '':
                        
                        read = [header, data]
                        fastxReadList.append(read)

                    # clear data when new header is found
                    data = ''

                    # replace old header with a new one
                    header = line
                
                else:
                    
                    # append the line to data
                    data += line
            
        # dump the last read into the dict
        read = [header, data]
        fastxReadList.append(read)

        # render template that shows the quality control check and all the required info    
        return render_template("FASTAOverview.html", fastxReadList=fastxReadList, pageChoice=pageChoice)       